{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{{ attach_library('tastytheme/lifestyleLibrary') }}
{{ attach_library('tastytheme/slickLibrary') }}
{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}
{% set banner_image = '/themes/tastytheme/src/images/lifestyle.jpg' %}


{% set nodeimgurl = file_url(content.field_image_detail['#items'].entity.uri.value)  ?: '' %}
{% set nodeimgsquare_url = file_url(content.field_image['#items'].entity.uri.value)  ?: '' %}
{% set nodeimgalt = node.field_image_detail.alt ?: label %}
{% set nodetitle = node.label ?: '' %}
{% set nodedefaultimage = node.field_image_detail.setting('default_image') %}


<article{{ attributes.addClass(classes) }}>
<input type="hidden" name='node_title' id='node_title' value="{{ nodetitle }}">
<input type="hidden" name='node_image' id='node_image' value="{{ nodeimgurl}}">
<input type="hidden" name='node_url' id='node_url' value="{{ url("<current>")["#markup"] }}">
    
    {{ title_prefix }}
    {% if not page %}
        <h2{{ title_attributes }}>
            <a href="{{ url }}" rel="bookmark">{{ label }}</a>
        </h2>
    {% endif %}
    {{ title_suffix }}

    <section id="banner">
        {% if nodeimgurl|trim('/') is not null and nodeimgurl|trim('/') is not empty %}
            <div class="banner_slide recipe-desktop" style="background-image: url('{{nodeimgurl}}');">
        {% else %}
            <div class="banner_slide recipe-desktop" style="background-image: url('{{ banner_image }}');">
        {% endif %}
                <div class="banner_slide_recipe--text">
                    {# <h1 class="banner_slide_recipe-h1">
                        {{nodetitle}}
                    </h1> #}

                </div>
                    <div class="arrow-section-general"></div>
            </div>
            <div class="banner_slide recipe-mobile" style="background-image: url('{{ nodeimgsquare_url }}');">

                <div class="banner_slide_recipe--text">

                </div>
                <div class="arrow-section-general"></div>
            </div>
        {# </div> #} {# I think this was a closing div with no matching open div #}
    </section>

    <section id="lifestyle">
        <div class="lifestyle-detail__article">
            <h1>{{nodetitle|raw}}</h1>
            {% include '@tastytheme/includes/sponsors-articles.html.twig' %}
                {# {{ drupal_view('related_brands', 'article_related_brands') }}    #}
                {# template: views-view-unformatted--related_brands--article_related_brands.html #}

            {# {{ drupal_view('related_brands', 'page_1') }}    #}
            {# template: views-view-unformatted--related_brands--page-1.html #}


            {% if node.body.0.value|striptags is not empty %}
                <p class="lifestyle-detail__article-paragraph">
                    {{node.body.0.value|raw }}
                </p>
            {% endif %}
            {{ drupal_view('related_top_content', 'page_1') }}

            <div class="lifestyle-detail__social-media social-share">
                <p class="recipe-detail__social-media-wrap-paragraph">{{ 'Share Article'|t }}&nbsp;</p>
                <a href="#" aria-label="facebook" id="mk-recipe-fb">
                    <span class="fa fa-lg fa-facebook"></span>
                </a>
                <a href="#" aria-label="twitter" id="mk-recipe-tw">
                    <span class="fa fa-lg fa-twitter"></span>
                </a>
                <a href="#" aria-label="pinterest" id="mk-recipe-pin">
                    <span class="fa fa-lg fa-pinterest"></span>
                </a>
            </div>
            
            
        </div>
    </section>

    <section id="coupons">
        {# {{ drupal_block('couponblockcallout') }} #}
        {# {{ coupon_block|t|raw }} #}
         {% include '@tastytheme/includes/coupon_block.html.twig' %}
    </section>

    {% if ar_rows is not empty and ar_rows|length >= 3  %}
        <section id="recipes">
            <div class="recipe__menu">
                <h2>
                    {{ 'Thereâ€™s More to Life!' | t }}
                </h2>
                <p>
                    {{ 'Explore more of our lifehacks, tips and fun articles.' | t }}
                </p>

                <div class="recipe__filter-wrapper">
                    <div class="recipe__menu-detail-wrapper">

                        {% for ar_row in ar_rows %}
                        	{% if loop.index < 4 %}
	                            {% set summary = ar_row.body|render %}
	                            {% set trimmed_body = summary|length > 100 ? summary|slice(0, 100) ~ '...' : summary %}
                                {% set trimmed_body = truncateText(trimmed_body)  %}
	                            <div class="recipe__menu-detail-section">
	                                {# <img class="recipe__menu-detail-section-image" src="{{ar_row.article_imageurl}}" alt="{{ar_row.article_imagealt | trim}}" /> #}

	                                <div class="background-zoom__parent">
										<a href="{{recipelink}}" class="img-recipe">
											<img class="background-zoom__child recipe__menu-detail-section-image" src="{{ar_row.article_imageurl}}" alt="{{ar_row.article_imagealt | trim}}" />
										</a>
									</div>
	                                <h3 class="recipe__menu-detail-wrapper-title">{{ar_row.title}}</h3>
	                                <p>{{trimmed_body|raw}}</p>

	                                <div class="recipe__btn-wrapper">
	                                    <a href="{{ar_row.nodeurl}}" class="recipe__btn_red">Read More</a>
	                                </div>
	                            </div>
                        	{% endif %}

                        {% endfor %}

                    </div>
                </div>
            </div>
        </section>
    {% endif %}

    <section id="recipes" class="">
        {{ drupal_view('carousel2', 'page_recipe') }}   {# page_recipe display #}
    </section>

    <!--brand carousel -->
    {% include '@tastytheme/includes/brands.html.twig' %}
    <!--brand carousel end -->


</article>
